#!/bin/bash

uts.pid() { echo $$; }
uts.noargs() { test -z $*; }
uts.rmwhite() { echo $* | sed 's/ //g' | sed 's/\t//g'; }

uts.istype()
{
	test $(type -t $1) = $2;
}

uts.isfn()
{
	uts.istype $1 'function';
}

uts.callif()
{
	local possiblefn=$1;
	shift;

	if test $(type $possiblefn == 'function)'; then
		$possiblefn "$@"
		status.ok;
	else
		status.err;
	fi
}

uts.argcmp()
{ 
	local num=$1; 
	local value=$2; 
	shift 2;

	shift $((num-1));
	echo $1;

	test $1 = $value;
}

uts.ereturn()
{ 
	local code=0;
	if uts.argcmp 1 --code $*; then
		code=$2;
		shift 2;
	fi

	echo $*;
	return $code;
} 

		
uts.error()
{
	>&2 echo $*;
}

uts.usererr()
{
	local err=1;
	if ! test -z $1; then
		err=$1;
		shift;
	fi

	local msg=$*;
		
	uts.error $msg;
	exit $err;
}


uts.privar()
{
	local pvarname=$(_pv.name)
	echo $pvarname
}

. uts.unit.shi

if tst.active; then

	tst.null() { echo ; } # tbd ###

	function test.privar.name()
	{
		a_private_test_var() { privar; }
		local testinname=$(a_private_test_var);
		local xtestout_prefix='a_private_test_var'
		local xtestout_suffix=$$
		local xtestout=$xtestout_prefix$xtestout_suffix;

		tst.assert --same $testinname $xtestout
	}

	function test.privar.null()
	{
		a_private_test_var() { privar; }
		local -n testvar1=$(a_private_test_var);

		local val1=$testvar1;
		tst.assert --same $val1 $(tst.null);
	}

	function test.privar.assignment()
	{
		a_private_test_var() { privar; }

		local -n testvar1=$(a_private_test_var);

		testin='test input value'
		testvar1=$testin;

		tst.assert --same "$testvar1" "$testin"
	}

	function test.privar.ref()
	{
		refvar() { privar; }
		local -n rv1=$(refvar);
		local -n rv2=$(refvar);

		anyvalue='any old value';
		testin='test value of some kind.';

		rv2=$anyvalue;
		rv1=$testin;

		tst.assert --same "$testin" "$rv2";
	}

	tst.run;
fi

