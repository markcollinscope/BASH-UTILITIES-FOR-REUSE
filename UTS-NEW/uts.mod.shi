#!/bin/bash

. uts.unit.shi

if test -z  $___mod___; then
# no indent.
___mod___='already included';

. uts._.shi

_.fnrefprivate _mod.Current;
declare -g $(_mod.Current);

_.fnrefprivate _mod.List;
declare -g $(_mod.List);

#
#name
#description
#fns
#

readonly SUB_WHITE=@@@@

_mod.nowhite()
{
	local in=$*;
	echo $in | sed "s/ /$SUB_WHITE/g";
}

_mod.withwhite()
{
	local in=$*;
	echo $in | sed "s/$SUB_WHITE/ /g";
}

_mod.fn()
{
	local name=$(_.arg $1);
}

function _init()
{
	local -n mlist=$(_mod.List);
	mlist="";
}

function mod.start()
{
	local name=$(_.arg $1);
	local -n current=$(_mod.Current) 
	local -n list=$(_mod.List)

	current=$name;

	local new=0;
	if _.contained_in $current $list; then
		new=1;
	elif ! _.isnull $list; then
		list="$name $list";
	else
		list=$name;
	fi
	return $new;
}

function mod.all()
{
	local -n mlist=$(_mod.List);

	_.isnull $mlist
	local res=$?

	echo $mlist;
	return $res;
}


function test.mod.start.mod.all()
{
	local modname='anyvalue';
	local another='anyothervalue';

	mod.start $modname;
	local is_new_module=$?
	tst.assert --ok $is_new_module;

	mod.start $modname;
	local new_module=$?
	tst.assert --err $new_module;

	mod.start $another
	local another_new_module=$?
	tst.assert --ok $another_new_module;

	tst.assert --same "$(mod.all)" "$another $modname"
}

function mod.end()
{
	local -n cur=$(_mod.Current);
	cur=
}

function test.mod.end()
{
	local modname='anothermodule';
	local -n current=$(_mod.Current);

	mod.start $modname;
	tst.assert --same $current $modname

	mod.end
	tst.assert --same $current ""
}

###
_init
###
tst.run
###

fi
