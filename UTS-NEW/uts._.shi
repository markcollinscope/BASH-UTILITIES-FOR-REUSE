# _.fns - utility functions to assist in bootstrap of uts.v1 utilities.

_.stack()
{
	local i=0;
	local fnname=$(_.fnname $i);
	local tmp=$(mktemp);
	(
		echo 'stack trace:'
		while test $fnname != main; do
			i=$((i+1));
			fnname=$(_.fnname $i)
			echo "stack($i): $fnname"
		done
	) > $tmp;
	echo $tmp
}

_.exit() {  exit $1; }
_.err() { >&2 echo $*; }
_.errcat() { >&2 cat $1; }

_.debug() { return 0; }
_.dbg() { if _.debug; then _.err $*; fi; }

_.pre() { echo uts; }
_.ext() { echo shi; }
_.isnull() { test -z "$1"; }
_.br() { echo "<$*>"; }
_.isfn() { test $(type -t "$1") = 'function'; }

_.unreachable() { _.progerr 'error - unreachable code section reached'; }

_.fnname() { local level=${1:-0}; level=$((level + 1)); echo "${FUNCNAME[$level]}"; }
_.progerr() { _.abort '...programming error detected - function:' $(_.br $(_.fnname 1)) ' ...' $*; }

_.arg() { if test -z "$*"; then _.abort "argument error in $(_.fnname)"; fi; echo $*; }
_.abort() 
{ 
	local i=0; 
	local stackfile=$(_.stack);
	_.errcat $stackfile;
	_.err "aborting..$*"; 
	_.err
	exit 1; 
}

p() { _.err $*; }

_.rmchars() 
{ 
	local str=$(_.arg $1); shift; 
	p str: $str, $*; 

	local res=$(echo $* | sed "s?$str??g"); 
	p res: $res
	echo $res
}

_.rmdot() { echo $* | sed 's/\.//g'; }
_.rmslash() { _.rmchars '/' $*; }
_.randstr() { _.rmdot $(_.rmslash $(mktemp XXXXXXXXXXXXXXXXXXX) ); };

_.fnconst()
{
	local name=$1;
	local val=$2;
	local fntemplate="
		$name()
		{
			echo $val;
		}
	";
	eval "$fntemplate";
}

_.fnrandconst()
{ 
	local name=$(_.arg $1);
	local value=$(_.randstr);
	_.fnconst $name $value
}

#_.fnrandconst rand
#echo $(rand);
#echo TESTING END;

_.fnbody()
{
	local fn=$(_.arg $1);
	local body=$( declare -f $fn | grep -v $fn | grep -v '{' | grep -v '}' );
	echo "$body"
}

_.fnclone()
{
	local from=$(_.arg $1);
	local to=$(_.arg $2);

	if ! _.isfn $from; then
		_.abort "not a function $(_.br $from)";
		_.progerr;
	fi

	p $(_.fnbody $from)
	local fnbody=$(_.fnbody $from);

	local fntemplate="
		function $to()
		{
			$fnbody ;
		}
	"
	eval $fntemplate;
}

echo 'seemingly working - fn clone and fn rand const ...'
