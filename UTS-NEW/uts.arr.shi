
_.debug() { return 1; }
_.dbg() { if _.debug; then _errecho $*; fi; }

_.pre() { echo uts; }
_.ext() { echo shi; }
_.exit() {  exit $1; }
_.Q() { echo $*; }
_.null() { test -z "$1"; }
_.br() { echo "<$*>"; }


set -e;

_.use()
{
	if test -z _.Q($1); then
		>&2	echo "_.use - no argument given.";
		_.exit $(_.err);
	fi
	local import=$(_.pre).$1.$(_.ext);
	if _.null $(which $import); then
		>&2 echo "_.use - not such file to import $(_br $import)";
		_exit 1;
	fi
	. $import;
}

. uts.unit.shi
. uts._.shi

_module()
{
	:;
}

_module arr

###
function arr.echo()
{
	local -n arr=$(ref $1);
	echo ${arr[@]}
}

function test.arr.echo()
{
	local -a in=(one two three);
	local out=$(arr.echo in);
	local xout='one two three';

	tst.assert --same $(arg $xout) $(arg $out);
}

_bs.count() { echo $#; }

###
function arr.len()
{
	local -n arr=$(ref $1);
	echo ${#arr[@]}
} 

function test.arr.len()
{
	local -a in=(one two three 'four five six but not really 4 5 6 - just fourth element in array');
	local xout=4;
	local out=$(arr.len in);

	tst.assert --same $xout $out;
}
###

###
function arr.at()
{
	local -n arr=$(ref $1);
	local pos=$(arg $2);

	echo ${arr[$pos]}
}

function test.arr.at()
{
	local in=(one two three four);
	local len=$(arr.len in);
	local i;

	for ((i=0;i<len; i++)); do
		out=$(arr.at in $i);
		xout=${in[$i]};
		tst.assert --same $out $xout;
	done
}
###

tst.run
