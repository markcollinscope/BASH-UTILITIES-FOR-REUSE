#!/bin/bash
# Core functions used in all other *utils*.

# the following file contain global values used across utils e.g. git dir, scripts dirs, log dirs ... one time include if present.
. utils_globals.shi

if ! alreadyIncluded UTILS_CORE; then
### START CONTENT - no indent.

CORE_SUMMARY=$(cat <<END_CORE
Core utility functions for bash. These functions are used across other utility functions extensively. Many are more for convenience or readibility than for extensive functionality, e.g. 'script' - print the basename of the currently running script... functions include dir/file checking/creation, null arg checking, bash argument checking and default Usage() function (requires USAGE var to be defined).
END_CORE
);

nostdout() 
# turn off standard output.
{ 
	exec > /dev/null; 
} 	

nostderr() 
# turn of standard error.
{ 
	exec 2> /dev/null; 
}

null() # <...args>
# if any args are supplied return true (0), else return false (1); uses test -z
# e.g. < if null "$@"; then ... fi >
{ 
	if test -z "$*"; then return 0; else return 1; fi 
}; 


isdir() # <name>
# return true (0)  if <name> is a directory, false (1) otherwise.
# e.g. < if isdir "$NAME"; then ... fi >
{ 
	if test -d "$1"; then return 0; else return 1; fi 
}; 

isDir() # <name>
# return true (0)  if <name> is a directory, false (1) otherwise.
{ 	
	isdir "$@"; 
} 

isfile() # <name>
# return true (0)  if <name> is a file, false (1) otherwise.
# e.g. < if isfile "$NAME"; then ... fi >
{ 
	if test -f "$1"; then return 0; else return 1; fi 
}; 

isFile() # <name> 
# return true (0)  if <name> is a file, false (1) otherwise  (duplicate of isfile).
{ 
	isfile "$@"; 
} 

script() 
# echo name (no path) of current (containing) bash script file.
{ 
    if ! null $0; then
	    echo $(basename $0);
    else 
        echo "bash-cmd-line";
    fi
}; 	

scriptName() # deprecated
# print base of current bash script *file* name (duplicate function)
{ 
	script; 
};

errecho() # [-s] <...args>
# print message to stderr. -s: precede message with including script name
{  
	setcol $LIGHTRED; 
	if test "$1" = "-s"; then
		>&2 echo "$(script): "
		shift;
	fi
	>&2 echo "$*" 
	resetcol; 
}

errfnecho() # <...args>
# always precedes error with script and bash function name.
# print message to stderr.
{ 
	errecho -s "[${FUNCNAME[1]} ()]: $*"; 
}

errifnull() # [ -m <msg> ] "$@"
# report error and exit if "$@" is null. nb: options removed before 'null' evaluation.
{
	eval $(valopt -m __MESSAGE "$@");
	if null "$@"; then 
		local MSG="($script) $__MESSAGE (null value found)"
		errfnecho "$MSG"
		exiterr -k;
	fi
}

callFnIfExists() # <name> <...args>
# if <name> is a function, call it with <...args>, otherwise do nothing.
{ 
	if test "$(type -t $1)" = "function" ; then "$@"; fi 
}

Usage() 
# default Usage function. Autocalled by bash utils - details of usage expected in bash $USAGE variable.
{ 
	USAGE="$(echo "$USAGE" | sed 's?\./??' )"; 
	errecho "$USAGE"; 
} 

_doscriptexit() # <code>
# exit with code, if not in terminal mode, otherwise print message.
{ 
	local EXITCODE=$1;

	if test "$0" = "bash" || test "$0" = "sh"; then # don't exit on terminal cmd line! deeply annoying!
		2>&1 echo "'exit' called in function <${FUNCNAME[2]}> - status <$EXITCODE>"
	elif test "$EXITCODE" = "-k"; then
		kill 0
	else
		exit $EXITCODE;
	fi
}

exitok()
# exit with ok status (0). If in terminal (command line) mode - don't exit terminal shell - instead print a message.
{ 
	_doscriptexit 0; 
}; 

exiterr() # [ -k | <exit code>]
# exit with non-ok status ($1). If in terminal (command line) mode - don't exit terminal - instead print a message.
# use -k option to exit from nested subprocesses.
{ 
	local EXITCODE=1; 
	if ! test -z "$1"; then EXITCODE=$1; fi;
	
	_doscriptexit $EXITCODE;
}

chkarg() # <bash variable name> [<level> (default 2)]
# if <bash variable name> does not have a value - print error and exit.
# <level> - how many levels of function call to find function name (for error message)
# e.g. 2: use function calling chkarg; 3: function that calls function that calls this function. etc.
{
	local VARNAME=$1; 	
	local LEVEL=${2:-2};
	
	local VALUE=${!VARNAME}
	local FNNAME=$(fnname -l $LEVEL)

	if null "$VALUE"; then 
		errecho "[$FNNAME]: undefined argument, variable or environment variable: <$VARNAME>"
		exiterr;
	fi
} 

chkvar() # as chkarg - overloaded to show intent.
{ 
	chkarg "$@"; 
} 

chkval() # as chkarg - overloaded to show intent.
{ 
	chkarg "$@"; 
} 

chkenvvar() # as chkarg - overloaded to show intent.
{
	chkarg "$@"; 
}


setvar() # <bash var name> <value>
# set <bash var name> to <value> - if <value> is undefined - error and exit.
# use to check parameters passed to functions correctly.
{ 
	local VARNAME="$1"; chkarg VARNAME;
	local VALUE="$2"; 

	local THISFN=$(fnname);
	local CALLINGFN=$(fnname -l 2)

	if null "$VALUE"; then
		errecho "$(script): <$THISFN> (caller: <$CALLINGFN>, var: <$VARNAME>) - no value given for second arg (\$2)"
		exiterr -k;
	fi

	eval "$VARNAME"="\"$VALUE\""; 
} 

### color codes (vt100)
 BLACK="\e[30m"
 RED="\e[31m"		
 LIGHTRED="\e[91m"	
 GREEN="\e[32m"		
 YELLOW="\e[33m"
 BLUE="\e[34m"
 MAGENTA="\e[35m"
 CYAN="\e[36m"
 WHITE="\e[37m"
 NORMAL="\e[0m"
 RESET=$NORMAL
### 

isTerminalOutput() 
# if the current output stream (1, 2 ...) is to a terminal return true (0), else false (1)
{
	local OUTPUT=1; if ! null "$1"; then OUTPUT="$1"; fi
    if test -t $OUTPUT; then return 0; else return 1; fi
}

# set to <true> to turn color off.
UTS_NOCOLOR=${UTS_NOCOLOR:-false}

setcol() # <color code>
# set text color - see VT100 color codes in this file. 
# color code values include: BLACK RED LIGHTRED GREEN YELLOW BLUE MAGENTA CYAN WHITE NORMAL RESET (both WHITE).
# precede color code with $ (e.g. $BLACK).
{
	local COLOR=$1; chkarg COLOR;
	if $UTS_NOCOLOR; then return 0; fi

	if isTerminalOutput; then echo -n -e $COLOR; fi
	if isTerminalOutput 2; then >&2 echo -n -e $COLOR; fi

	return 0;
}

setcolnorm() 
# reset text color to 'normal'. 
{
	setcol $NORMAL
}
resetcol() 
# reset text color to 'normal'. 
{ 	
	setcolnorm; 
} 

scrCurPos() # [ <x> <y> ]
# Position the cursor at(row,column(relative top rhs) as per <x>,<y> - or at 0,0 if either args not given.
{
	local ROW=$1;
 	local COL=$2;
 	
 	if ! null $ROW && ! null $COL; then
 		local OUTPUT="\e[""${ROW}"";""${COL}""H"
 		echo -ne "$OUTPUT"
 	else
 		echo -ne "\e[H"
 	fi
}

scrClear() # no args.
# clear the screen.
{
	echo -ne "\e[2J"
}

fnname() # [-l <call-fn-level>] 
# echo the current function name (the function calling this one)
# -l:  e.g. "fnname -l 2"  echo name of function  calling function calling this function.
{
	local ARG_FLAG=$1;
	local ARG_LEVEL=$2;
	local FN_LEVEL=1;

	if test "$ARG_FLAG" = "-l"; then 
		if test -z "$ARG_LEVEL"; then errfnecho "[fnname -l NO LEVEL PROVIDED]"; exiterr -k; fi
		FN_LEVEL=$ARG_LEVEL; 
	fi
	echo "${FUNCNAME[$FN_LEVEL]}"
}

ne() # <bash command ... >
# run command without those irritating error messages! (ne: No Error) e.g. $ ne errecho hello; - no output
{ 
	2>/dev/null "$@"; 
}	

no() # <bash command ...>
# run command without std output! (no: No Output) - e.g. $ no echo hello; - no output
{ 
	>/dev/null "$@"; 
}		

checkNotEmptyString() # <msg> [ <bash var name> ] - deprecated.
# deprecated - use chkarg().
# e.g. usage: $ 'local NAME=""; checkNotEmptyString "You forgot to give a name!" $NAME' 
{
	local ERROR_MSG="$1";
	local VALUE_TO_CHECK="$2";

	if test -z "$VALUE_TO_CHECK"; then 
		errecho "$0 - [$(fnname -l 2)] $ERROR_MSG"; 
		callFnIfExists Usage
		exiterr
	fi
}

xgrep() # <...normal 'grep' args>
# call grep with args given, but exclude certain patterns from results (grep -v)
# $UTS_EXCLUDE defines the pattern - in egrep form - see utils_globals.shi.
{ 
	grep "$@" | grep -v -E "$(getExcludes)"; 
}

xfind() # <... standard find args>
# call find with args given, but exclude certain patterns from results (grep -v)
# $UTS_EXCLUDE defines the pattern - in egrep form - see utils_globals.shi.
{ 
	find "$@" | grep -v -E "$(getExcludes)"; 
}

___PRIVAR_ENCODING___=$$; # this global var is the only one that can't be encoded!
_mkpv()
{
	local PV=___PRIVAR_ENCODING___; # todo - consider options to enable multiple sourced files (currently possible clashes could occur).
	local VAR=$1 

	VAR=$VAR$PV
	echo $VAR
}

privar() # <var-name> [<value>] - get/set a privar - a name encoded 'private variable' # BETA
# if <value> is given, privar <var-name> is set. otherwise echo-returns the value.
# e.g. usage: (1) privar AA 100; (2) echo $(privar AA); # output 100
{
	# nb: a privar is a variable with an encoded name, mostly used in 'library' (re-usable fnality) 
	# bash scripts - i.e. those 'included' (using the ./source directive). to avoid name clashes.
	local VAR=$1;
	local VAL="$2";
    
	vbvar VAR
	vbvar VAL

	local PVARNAME=$(_mkpv $VAR);
	vbvar PVARNAME

	if null $VAL; then 
		echo ${!PVARNAME}
	else
		evalvb $PVARNAME=$VAL
    fi
}

append() # [-s] <var> <appendage> - append <appendage> to <var> - changes <var>.# BETA
# -s: add a space before the <appendage>. e.g. usage:
# A=hello; append -s A world; echo "A: $A"; 	# A: hello world
# B='one'; append B two; echo !B: $B"; 		# B: onetwo
{
    if test "$1" = "-s"; then CONCATOPT="-s"; shift; fi
    V=$1 
    RES=$(concat $CONCATOPT ${!V} "$2");
    eval $V=\"$RES\";
}


doSometimes() # [-d] do the action specified as "$@" - on 'occasion'# BETA
# default option - once per system boot (when /tmp is cleared)
# -d: force next call to doSomething to 'do something'! 
# futures: will be extended.
{
    local TMPFILE="/tmp/__$(basename $0)__$(fnname -l 2)__$(fnname)"

    if test "$1" = "-d"; then shift; if isfile $TMPFILE; then rm $TMPFILE; return 0; fi; fi

    CMD="$@"
    if test -z "$CMD"; then CMD="2>&1 echo \"$(fnname): no command given - bye!\""; fi

    if ! isfile $TMPFILE; then
        eval $CMD
        touch $TMPFILE;
        return 0;
    fi
    return 1;
}

#arg.env() # <var> [-d <default>] [-v <var-name>]# BETA
# check if <var> is null. if so error unless
# -d <default> set - in which case use <default>.
# if '-v <var-name>' is used, set local script varaible <var-name> to <var> value.
#{
#	white true; do
#		if test "$1" == "-d; then
#    eval $(valopt -d DEFAULT_OPT "$@");
#    eval $(valopt -v ALTVAR_OPT "$@");
#
#    local VAR=$1
#	vbvar VAR
#
#    local VARNULL=false; if null ${!VAR}; then VARNULL=true; fi
#    local DEFAULTNULL=false; if null $DEFAULT_OPT; then DEFAULTNULL=true; fi
#    local ALTVARNULL=false; if null $ALTVAR_OPT; then ALTVARNULL=true; fi
#
#	if $VARNULL && $DEFAULTNULL; then errecho "$(fnname -l 2): $VAR is not set, and no default provided" ; exiterr -k; fi
#    if $VARNULL && ! $DEFAULTNULL; then eval $VAR=$DEFAULT_OPT; fi
#    if ! $ALTVARNULL; then eval $ALTVAR_OPT=${!VAR}; fi
#}

getarg() # <num> <...args> # tbd deprecate.
# echo-return the <num>'th argument in <...args> (i.e. $<num>) nb: uses shift.
{
	local n=$(arg $1); 
	shift $n;
	echo $1;
}

# arg.at() # <num> <...args> # BETA
# echo-return the <num>'th argument in <...args> (i.e. $<num>).
# error if <num> > <number of ...args>
# {
# 	local pos=$1; shift;
# 	if test -z "$pos"; then echo "arg.at arg1 null error" >&2; exiterr -k; fi

# 	local args="$@"
# 	local nelements=$#

# 	if test "$pos" -gt "$nelements"; then
# 		errfnecho "seeking <$pos th> arg in <$args> - sadly there are only <$nelements> elements,so it is adieu, dear friend";
# 		exiterr -k;
# 	fi 

# 	shift $((pos-1));
# 	echo $1;
# }

arg()
{
	local MSG;
	if test "$1" == "-m"; then
		MSG="$2";
		shift 2;
	fi

	local THEARG=$1

	#if test $ARG = 'env'; then shift; arg.env "$@"; return 0; fi
	#if test "$ARG" = 'at'; then shift; arg.at "$@"; return 0; fi

	local CALLER=$(fnname -l 2);

	if null "$THEARG"; then 
		if ! null $MSG; then MSG=$(concat " : " "$MSG"); fi
		errfnecho "arg undefined in <$CALLER> $MSG";
		exiterr -k; 
	fi

	echo "$THEARG"
}

isfd()
{
    local FD=$(arg $1);
    isfile $FD || isdir $FD
}

checkIsFileOrDir() 
{
	local FD=$(arg $1)

    if ! isfd $FD; then
        errfnecho "no such file or directory: <$FD>";
        exiterr -k;
    fi
}

evalerr() # do eval of "$@" - print message saying what is done to stederr.
{
    CMD="$@"
    errecho "do (eval):  <$CMD>"
    eval $CMD
}

# END
fi
