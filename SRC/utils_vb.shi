#!/bin/bash

# utils to enable addtional (perhaps debug) information to be printed (to stderr) only when UTS_VERBOSE flag is set.

. utils_globals.shi

if ! alreadyIncluded UTILS_VB; then 
. utils_core.shi
. utils_opts.shi

UTS_VERBOSEFLAG=${UTS_VERBOSEFLAG:-'--vb'}	# can override from environment. # default of last resort here!

## START CONTENT
VB_SUMMARY=$(cat <<END_VB
Functions mainly used in debugging - that print values, etc. when a 'verbose' flag is set to TRUE/ON.  Note that the functionality automatically parses (then removes) "$UTS_VERBOSEFLAG", if it is an argument to a script using these utils. If detected the 'verbose' flag (UTS_VERBOSE) is set to TRUE/ON. If not detected UTS_VERBOSE will be set to FALSE/OFF.
END_VB
);

setVerbose() 
# set the verbose flag to TRUE 
# nb: used by vbecho and similar functions
{ 
	export UTS_VERBOSE=true; 
	export UTS_VERBOSE_PASSTHRU="$UTS_VERBOSEFLAG";
}

getVerbose()	
# return true (0) if verbose flag set to on.
{ 
	if $UTS_VERBOSE; then return 0; else return 1; fi; 
}

verbose()		
# return true (0) if verbose flag set to on.
{ 
	getVerbose; 
}

resetVerbose() 	
# set verbose flag to false.
# nb: used by vbecho and similar functions
{ 
	export UTS_VERBOSE=false; 
}

resetVerbose;

vbvar() # <bash-var> - nb: no '$' needed or permitted.
# e.g. vbvar MY_VAR
# for debug -  print name and value of bash variable - <bash-var>
{
	local BASHVAR=$1; chkarg BASHVAR;
	vbecho "$(basename $0) [${FUNCNAME[1]}()]: $BASHVAR: <${!BASHVAR}>";
}

vbecho() # <string>
# print <string> if $(verbose) - verbose output flag - is true.
{ 
	if $UTS_VERBOSE; then setcol $YELLOW; (>&2 echo $*); setcolnorm; fi 
}

vbfnecho() # <string>
# print <echo style string> if $(verbose) - verbose output flag - is true.
# precede <echo style string> with function name of calling function.
{ 
	vbecho "$(basename $0) [${FUNCNAME[1]}()]: $*"; 
}

vbsleep() # <seconds>
# sleep for <seconds> if $(verbose) (verbose output flag) is true.
{ 
	if $UTS_VERBOSE; then sleep $*; fi 
}

checkIfVerbose() # <arg> - deprecated 
# now autoparses - for backwards compatibility and internal utils use only.
# quick parse to set if <arg> is $UTS_VERBOSEFLAG flag (by default '--vb', but can be reset).
{
	if test "$1" = "$UTS_VERBOSEFLAG"; then
		setVerbose;
		return 0;
	fi
	return 1;
}

evalvb() # <command>
# eval (bash fn) the <command> given. 
# print it first if verbose option is set.
# nb: this function does the 'eval' regardless of verbose status.
{
	CMD="$@"
	vbecho $CMD;
	eval $CMD
}


# do autoparsing of verbose flag.
if ! $UTS_NOAUTOARGS; then
	eval $(boolopt $UTS_VERBOSEFLAG USE_VERBOSE_OUTPUT "$@");
	if $USE_VERBOSE_OUTPUT; then
		setVerbose;
	fi
fi

#-- nb
# ### Autoparsing of Command Line Options
#
# This utilities file parses command line to see of UTS_VERBOSEFLAG ('--vb' by default, configurable in utils_globals) is present,
# if so, removes UTS_VERBOSEFLAG from the including script's command line args - so is 
# transparent to that script. The overall effect is that any script using this utils file will switch on versose mode (useful debugging)
# completely transparently to the including script.
#--

### END CONTENT
fi
