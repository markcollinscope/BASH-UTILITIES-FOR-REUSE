#!/bin/bash

. utils_globals.shi

FD_SUMMARY=$(cat << END_FD
Utilities for file and directory management. Find directories and files, check they exist, find directories not in the 'excluded' \
list (UTS_EXCLUDE - defined in egrep format). Functions with 'x' as first char exclude results based on the UTS_EXCLUDE value.
END_FD
);

if ! alreadyIncluded UTILS_FD; then

. utils_core.shi

### START CONTENT

# checkxxx - check something, exit with error if there's a problem.
# ensurexxx - check if something is done, if not, do it.

ensuredeleted() # <file/dir name>
# if it exists, delete the <file/dir> given. otherwise do nothing.
{
	local FILE_OR_DIR=$1; chkarg FILE_OR_DIR;
	
	if test -e $FILE_OR_DIR; then
		vbecho "deleted $FILE_OR_DIR"
		rm -rf $FILE_OR_DIR
	fi
}

checkfileexists() # <file>
# check if <file> exists - exit with error if not.
{
	local FILE=$1; chkarg FILE;
	local MSG="($2)"

	if ! test -f $FILE; then
		errecho "$0: file <$1> does not exist $MSG"
		callFnIfExists Usage
		exiterr;
	fi
}

checkdirexists() # <dir>
# check if <dir> exists - exit with error if not.
{
	DIR="$1"; chkarg DIR;

	MSG="Directory <$DIR> does not exist"

	if ! null "$2"; then MSG="$2"; fi

	if ! test -d "$DIR"; then
		errecho "$MSG"
		callFnIfExists Usage
		exiterr;
		return 1;
	fi
	return 0;
}

ensuredirexists() # <dir>
# if <dir> does not already exist, create it.
{
	DIR="$1"; chkarg DIR; 

	if ! test -d "$DIR"; then
		mkdir -p $DIR
		vbfnecho "Created: $DIR"
	fi
	local XC=$?
	
	if test $XC -ne 0 ; then 
		errecho "Unable to create directory $DIR"
		exiterr; 
	fi
}

fdmatch() # <shell glob pattern>
# is there a matching file or dir for shell glob pattern given? return true/false (0/non-0)
{
	stat -t $1 > /dev/null 2>&1
}

__TMPDIR='/tmp/UTILS-TMPDIR'
tmpFile() # [ <num> ] 
# generate a tmp file name with <num> unique charactors in it. Default 5.
{
	ensuredirexists $__TMPDIR

	local LEN="$1"
	if null "$LEN"; then LEN=5; fi

	PREFIX=$(script)
	
	local TMP="$__TMPDIR/$PREFIX.$(randomString $LEN)"
	echo $TMP
}


fileecho() # [--rm] <message> <file> [...<file>] 
# (write <message> to multiple files. clear files first if '--rm')
{
	local CLEAR_FILE_BEFORE_NEW_WRITE=false
	if test "$1" = "--rm"; then CLEAR_FILE_BEFORE_NEW_WRITE=true; shift; fi

	local MSG="$1"; shift; chkarg MSG;

	local LIST_OF_FILES="$*"; chkarg LIST_OF_FILES;

	for i in $LIST_OF_FILES; do
		if $CLEAR_FILE_BEFORE_NEW_WRITE; then
			rm -r $i;
		fi
		echo "$MSG" >> "$i";
	done
}

findFile() # [ -d <dir> ] [ -h ] <file>
# downwards recursive search for file (inc. part name). start in cwd unless -d: use <dir> -h: use $HOME
{
	FLAG=$1
	DIR=.; 
	if test "$FLAG" = "-d"; then 
		DIR="$2"; shift 2;
   	elif test "$FLAG" = "-h"; then
		DIR=~; shift;
	fi

	FILE=$1; chkarg FILE

	find $DIR -name $FILE -print -quit 2>/dev/null
}

findfile() # [ -d <dir> ] [ -h ] <file>
# downwards recursive search for file (inc. part name). start in cwd unless -d: use <dir> -h: use $HOME
{ 
	findFile $*; 
}

backupFile() # <file/dir>
# make a backup <to UTS_BACKUPDIR> of <file> nb: can be a dir.
{
	FILE=$1; chkarg FILE;

	ensuredirexists $UTS_BACKUPDIR
	BACKUPFILE=$UTS_BACKUPDIR/$FILE.$(date --iso-8601)

	if test -e $FILE; then		
		vbecho "FILE <$FILE> IS BEING BACKED UP TO <$BACKUPFILE>"
		cp -r $FILE $BACKUPFILE;
	fi
}

backupDir() # <dir>
# make a backup <to UTS_BACKUPDIR> of <dir> nb: can be a file.
{ 
	backupFile $*; 
}

getPath() # [-h] 
# return space seperated list of all dirs (full path name) on $PATH; -h: only those under $HOME
{
	local HOMEONLY=false;
	if test "$1" = "-h"; then HOMEONLY=true; shift; fi

	TFILE1=$(tmpFile)
	TFILE2=$(tmpFile)

	IFS=':'
	for i in $PATH; do
		if test -d "$i"; then
		(
			cd $i; pwd; # full path to dir.
		)
		fi
	done | sort | uniq > $TFILE1
	
	if $HOMEONLY; then 
		grep "$HOME" < $TFILE1 > $TFILE2;
	else
		mv $TFILE1 $TFILE2
	fi
	cat $TFILE2
}

mkfindor() # <...args>
# make a find 'or expression' with many filename patterns ("$@").
# e.g. 'mkfindor *.sh *.shi' echos => '-name *.sh -o -name *.shi'
{
	setvar PATT $1
	shift;

	RETVAL="-name $PATT"

	for i in "$@"; do
		RETVAL=$(concat -s $RETVAL -o -name $i)
	done	

	echo "$RETVAL"
}

xfinddirs() # [-i]
# find non excluded dirs below current.
# -i: include current dir in results.
{
	if test "$1" = "-i"; then
		xfind . -type d
	else
		xfind . -type d | grep -v '^\.$'
	fi
}

xforeachdir() 
# run a command in each directory echo-returned by $(xfinddirs).
{
	setvar CMD "$*"

	for i in $(xfinddirs); do
	(
		vbfnecho $i;
		cd $i;
		eval $CMD;
	)
	done
}

xfindfiles() # <...args> ("$@")
# find files below current dir that match the glob pattern(s) (ls style) in <args>.
# e.g. xfindfiles *.ts *.js
{
	xfind . -type f $(mkfindor "$@")
}

xfindfilesgrep() # <grep arg>
# return (list, echo)  files containing a pattern with a recursive dir descent search 
# -s: show grep results; by default: no grep output is shown.
{
	local SHOW=false; if test "$1" = "-s"; then SHOW=true; shift; fi

	setvar PATTERN "$1"; shift;

	for i in $(xfindfiles "$@"); do
		if no xgrep "$PATTERN" "$i"; then
			setcol $GREEN
			echo $i;
			setcol $CYAN
			if $SHOW; then xgrep "$PATTERN" "$i"; fi
			resetcol
		fi
	done
}

xfindcwd() 
# list files (applying exclusions) in current dir.
{
	for i in $(xfind . -maxdepth 1 | sed 's?\./??g' | grep -v '^\.'); do
		if test -f $i; then
			echo $i;
		fi
	done
}

### END
fi
