. utils.shi

arg() # -n: is a valid number (int) - forall numbers passed.
{
    eval $(boolopt -n NUM_OPT "$@")

    if null "$@"; then errecho "$(fnname -l 2): null value fails test in $(fnname)"; exiterr -k; fi

    if $NUM_OPT; then
        for i in "$@"; do
            if ! isNum $i; then errecho "$(fnname -l 2): number fails test in $(fnname) args: <$@>"; exiterr -k; fi
        done
    fi

    echo "$@"
}

tbd() { errecho "$(fnname -l 2): to be done $*"; if test "$1" = '-x'; then errexit -k; fi; } 

str.append_if() { tbd; }

list.encode() # -a - encode the whole list? including elements...
{
	tbd;
}

list.decode() # allow non-encoded. tag if encoded. # -a ?
{
	tbd;
}

list.nullerr()
{
	if test $# = 0; then errecho "$(fnname -l 2) - null list.nullerror"; errexit -k; fi
}

list.init() # --le (encode)? with --ld (decode) # or always!
{
    echo "$@";
}

list.head()
{
	list.nullerr "$@"
	echo $1;
}

list.tail()
{
	list.nullerr "$@"
	shift;
    echo "$@";
}

list.reverse()
{
	if ! null "$@"; then
		local head=$1;
		shift;
		local tail="$@"
		echo $(list.reverse $tail) $head;
	fi
}

list.reverse 1 2 3 4 5 6 7 eight nine 'ten eleven';

exit;
 
list.len()
{
	echo $#;
}

list.notfound=-1;

list.find() # <val> 
{
	eval $(valopt -m _FND_MSG "$@");

	local val=$1; shift;

	if null $val; then 
		errecho "$(fnname): no position index given $_FND_MSG";
		exiterr -k;
	fi

	local count=1;
	for i in "$@"; do
		if test $i = $val; then
			echo $count;
			return 0;
		fi
		count=$((count+1))
	done
	echo $list.notfound;
	return 1;
}

list.contains()
{
	list.find "$@" > /dev/null;
}

list.get()
{
    local index=$(arg -n $1); shift;
    echo $(getarg $index "$@");
}

list.set()
{
    local index=$(arg $1);
    local value=$2; 
    shift 2;

    local a="$@";
    local retval=

    retval=$(list.to $((index - 1)) $a);
    retval=$(list.append $value $retval); 
    retval=$(list.from $((index + 1)) $a);

    echo $retval;
}

list.to()
{
    local index=$(arg -n $1); shift;

    local retval=
    for i in $(seq 1 $index); do 
        retval=$(concat -s $retval $(getarg $i "$@"));
    done
    echo $retval
}

list.from()
{
    local index=$(arg -n $1); shift;

    local retval=
    for i in $(seq $index $#); do 
        retval=$(concat -s $retval $(getarg $i "$@"));
    done
    echo $retval
}

list.range()
{
    local from=$(arg -n $1); local to=$(arg -n $2); shift 2;
    local num=$((to - from));

    local retval=$(list.from $from);
    retval=$(list.to $to $retval);

    echo $retval
}

list.push() # <val> <list>
{
    echo "$@"
}

list.popval()
{
    getarg $# "$@";
}

list.pop()
{
    list.to $(($# - 1)) "$@"
}


echo "INIT: $X"
X=$(list.init a b c d e f);
echo $X
echo

echo "to 3: $"
echo $(list.to 3 $X);
echo

echo "FROM 4: $X"
echo $(list.from 4 $X);
echo

echo "PUSH g h i: $X"
X=$(list.append $X g h i)
echo $X
echo

echo "popval: $X"
echo "VALUE: $(list.popval $X)"
echo

echo "POP: $X"
X=$(list.pop $X)
echo $X
echo

echo "ADD A: $X"
X=$(list.prepend A $X) # ins/del
echo $X
echo

echo "REM: $X"
X=$(list.rem $X)
echo $X
echo

echo "INDEX 4 to ZZZ: $X"
X=$(list.set 4 ZZZ $X)
echo $X
echo

echo "GET 5"
echo $X
echo $(list.get 5)
echo
