#/bin/bash
#
# enum function <base>
# - enum() <name> <item-list>
#	- no whitespace
#	- create 'named' enum [ fn <name>() ]
#	- <name>() - default - echo values.
#	- <name.is> => abort if <item> not in enum <name>.
#	- <name.is> --ret <item> => return is <item> in enum <name>.
#	
# - later:
#	--doc - desciption of enum.
#	--mod - module for enum.
#	?

uts.const()
{
    local name=$1;
    local val=$2;

    if test -z $val; then val=$name; fi

    local tpl="
        $name() { echo "$val"; }
    ";
    eval $tpl;
}

uts.flag()
{
    local flag=$1;

    if test $flag == '--flag'; then
        # strip - or -- from this, if needed.
        # add - or -- onto this.
        echo result;
    elif test $flag == '--var'; then
        # add - or -- to this, if needed.
        # strip - or -- from this.
        echo result;
    else
        local name=$1;
        local useflag=${2:-name};
        useflag=(uts.flag --flag $useflag);

        uts.const $name $useflag;
    fi
}

uts.enum()
{
    local name=$1;
    shift;
    local vals="$@";

    local tpl="
		$name()
		{
		    local flag=\$1;
		
		    if test \$flag == '--chk'
		        local val=\$2;
		        for i in $(enum.$name);
		            if test \$i == \$val; then
		                return 0;
		            fi
		        done
                return 1;
		    else
		        echo \"$@\";
				return 0;
		    fi
			return 1;
		}
    ";
    echo $tpl;
}


uts.const Apple;
uts.const Banana;
uts.const Kiwi;
uts.const Orange;

# uts.enum Fruit $(Apple) $(Banana) $(Kiwi);

avalue=$(Orange);

if ! Fruit --chk $avalue; then echo 'error in assignment'; fi

