
### ASSERTIONs for error checking.
# std msg.
__ass.err.nws() { echo 'error - whitespace not allowed in args/params'; }
_ass.nws()
{
    local readonly whitespace=' ';
    for i in "$@"; do
        local rmwhite=$(echo $i | sed "s/whitespace//g");
        if ! test "$i" = "$rmwhite"; then _sys.abort $(__ass.err.nws); fi
    done
}


_fn.null NB.FOR.INLINE

NB.FOR.INLINE
_ass.nws()
{
    echo eval "
        _io.err.fn 2 ; 
        \$(_ass.nws) \"$@\" ; 
        _io.err.fn -C ;
    ";
}

exit;

NB.FOR.INLINE
_fn.args.forall()
{
    $(_ass.nws);

    local fn=(_fn.arg $1);
    _echo "eval $fn $@";
}

_str.match()
{
    $(_ass.nws);

    local v1=$(_fn.arg $1);
    local v2=$(_fn.arg $2);
    test $v1 = $v2;
}

_sed.subst()
{
    $(_ass.nws);

    local sedexpr=$(_fn.arg $1);
    local in=$(_fn.arg $2);
    echo $in | sed "$sedexpr";
}

_str.subst()
{
    local str=$(_fn.arg $1);
    local exp=$(_fn.arg $2);

    local sedstr=$(_sed.subst $exp $str);
    echo $sedstr;
}

_str.len()
{
    $(_ass.nws);

    local in=$(_fn.arg $1);
    echo ${#in};
}

_str.cat()
{
    $(_ass.nws);

    local res;
    for i in "$@"; do res="$res ' ' $I"; done;
    echo $res;
}

_flag.prefix()
{
    $(_ass.nws);

    local in=$(_fn.arg $1);
    if test $(_str.len $in) = '1'; then 
        echo '-'
    else
        echo '--';
    fi
}

_flag()
{
    $(_ass.nws);

    local flag=$(_fn.arg $1);
    local in=$(_fn.arg $2);
    local rmdash=$(_str.subst $in 's/^-*//g');

    case "$flag" in

        --prefix)
            _flag.prefix $in;
            return;
        ;;

        --is)
            ! test $rmdash = $in;
            return;

        ;;

        --rmdash)
            echo $rmdash;
            return;
        ;;

        --withdash)
            echo $in$(_flag --prefix $in);
            return;
        ;;

    esac;
}
