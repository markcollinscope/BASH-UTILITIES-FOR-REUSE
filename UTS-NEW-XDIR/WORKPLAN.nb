use.core - basic start place

1:	uts.base.shi.TBC
IN:	
uts.mod-privar-refvar-const-mod.CHK
uts.core.to-base.FIRST.TBD


ORDER TBD:

2i:	  enum
uts.enum.shi.TBD
uts.misc-enum-stack-pid-opt.CHK

2ii:  flag

2iii:  
uts.smap.shi
uts.sarr.shi

3: sys.
sys.basic functions.
uts.meta.notes.CHK

3i: uts.script.shi

3ii: uts.fn.shi uts.arg.shi uts.opt.shi <
fn OR opt OR arg-opt or combine.

include:
fn.arg, fn.opt fn.args fn.opts
fn.start fn.body fn.echoret fn.return fn

OPT-SECTION:
TYPE: struct OPT or struct OPT.B struct OPT.V ...
- name M
- flag M
- var M
- syn O
- notes O
- default <override option>


ARG-SECTION
MISC ON ARG BELOW---
TYPE ARG
KEY: arg T:struct. fields:struct level. BUT: optionality: INSTANCE or STRUCT with OVERRIDE?
NEW: return arg struct. can be used in multiple places.

arg_dir=$(arg.var <[@]name=var>) -- structure that can be used.
-- mand/opt on usage...
e.g. arg.dir=$(arg.var dir --ws|--nows [--var directory] --doc 'blah blah blah' 
=>
arg.name=dir <mand>
arg.doc='blah ...' <opt>
arg.type=<unused as yet> - so optional field.

declare -n arg_dir=$(arg ...);
- arg.init ... <default - but $(arg $1) ...
- arg.equal ... <derive?>

arg.doc $arg_dir --fmt <format> - default is terminal.
Aarg.echo $arg_dir;

declare time: --name --doc --type;
usage time: --mand/default (other?) <default is mandatory! assumed>
usage override? name-<var

enum <implied MAND>|DEFAULT

TYPE ARGS arg[1-*, ordered] <ordered>
$(args <name> arg1 arg2 arg3 arg4) <name - fn?>

opt_del=$(opt.bool|val <name>=<var> --var <var> 


- fnargs=fn.args a1 a2 a3 @a4 @a5 (or similar)
- 



uts.arg.shi.CHK
uts.arr.shi.TBD
uts.fn.shi.CHK
uts.list.shi.TBD
uts.misc-fnconst-fn-body-fngetset-modname.CHK
uts.mod-start-end-misc.CHK
uts.privar.shi.++CHK
uts._.shi.CHK
uts.str.shi.TBC
