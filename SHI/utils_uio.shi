#!/bin/bash

. utils_core.shi
if ! alreadyIncluded UTILS_UIO; then

FFLAG=${UTS_FFLAG:-"--ff"}	# can override from environment.

UTS_FORCE=false;	# override manual intervention requests
UTS_FORCEFLAG="$FFLAG";	# empty or FFLAG (pass onto subscripts - subscript $UTS_FORCEFLAG)

###
# The functions below (force related) set the 'force' flaghat override requests for user confirmation.
# See Warning(), HitAnyKeyToContiue() etc.
# Similar to 'rm -f xxx' for example.
# By default '--ff' in a containing script with trigger the force flag to be set. The value '--ff' can be overridden.
# See utils_globals.
###

setForce() 		
# set the force flag to true.
{ 
	export UTS_FORCE=true; export UTS_FORCEFLAG="$FFLAG"; 
}
resetForce()	
# set the force flag to false.
{ 
	export UTS_FORCE=false; export UTS_FORCEFLAG=""; 
}
getForce()		
# return TRUE if the force flag is set.
{ 
	if $UTS_FORCE; then return 0; else return 1; fi; 
}

force()			
# return TRUE if the force flag is set.
{ 
	getForce; 
}

checkIfForce() # <arg> - deprecated - for back compatibility and internal utils use.
# check if <arg> is $FFLAG- if it is the force flag will be set.
{
	if test "$1" = "$UTS_FORCEFLAG"; then setForce; return 0; else return 1; fi
}

hitAnyKeyToContinue() # [<message>] 
# print <message> and wait for 'enter' key press.
{
	local MSG=$1

	if $(force); then return; fi
	
	MSG="$MSG - hit enter to continue - ctl-c to exit"
	errecho $MSG
	read x
}

Warning() # [<message>] 
# show <message> - then wait for yes/n response, exit on 'n'.
# [-n] - do not exit on "no" reponse - return false (1) instead.
# <message> is optional. Default is 'Continue?'
{
	local EXITONNO=true; if test "$1" = "-n"; then EXITONNO=false; shift; fi
	local OPTIONAL_MSG="$1";
	local MSG="CONTINUE?" # default.

	local RETURN_VAL=0;
	if $(force); then return $RETURN_VAL; fi

	if ! test -z "$OPTIONAL_MSG"; then MSG="$OPTIONAL_MSG"; fi
	MSG="$MSG [yes|n]"

	while true; do
		errecho $MSG
		read yn
		case $yn in
			[Yy]es ) 
				break;;
			[Nn]* ) 
				if "$EXITONNO";
				then 
					exiterr;
				else 
					RETURN_VAL=1; break; 
				fi;;
			* ) errecho "Please answer yes or no (n).";;
		esac
	done
	return $RETURN_VAL;
}

# Parse $1 of containing script - set force flag is value is $FFLAG (default --ff, but configurable).
if ! $UTS_NOAUTOARGS; then
	if checkIfForce "$1"; then shift; fi # NB: use --vb before --ff if necessary.
fi

#CONTENT ENDS
fi
