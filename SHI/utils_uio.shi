#!/bin/bash

. utils_core.shi
if ! alreadyIncluded UTILS_UIO; then

FFLAG=${UTS_FFLAG:-"--ff"}	# can override from environment.

UTS_FORCE=false;	# override manual intervention requests
UTS_FORCEFLAG="$FFLAG";	# empty or FFLAG (pass onto subscripts - subscript $UTS_FORCEFLAG)
setForce() 		{ export UTS_FORCE=true; export UTS_FORCEFLAG="$FFLAG"; }
resetForce()	{ export UTS_FORCE=false; export UTS_FORCEFLAG=""; }
getForce()		{ if $UTS_FORCE; then return 0; else return 1; fi; }
force()			{ getForce; }

checkIfForce()
{
	if test "$1" = "$UTS_FORCEFLAG"; then setForce; return 0; else return 1; fi
}

if null "$UTS_NOAUTOARGS"; then
	if checkIfForce "$1"; then shift; fi # NB: use -v before -f if necessary.
fi

hitAnyKeyToContinue() # [<message>]
{
	local MSG=$1

	if $(force); then return; fi
	
	MSG="$MSG - hit any key to continue - ctl-c to exit"
	errecho $MSG
	read x
}

Warning() # [-n] [<message-to-show>] (-n - do not exit on "no")
{
	local EXITONNO=true; if test "$1" = "-n"; then EXITONNO=false; shift; fi
	local OPTIONAL_MSG="$1";
	local MSG="CONTINUE?" # default.

	local RETURN_VAL=0;
	if $(force); then return $RETURN_VAL; fi

	if ! test -z "$OPTIONAL_MSG"; then MSG="$OPTIONAL_MSG"; fi
	MSG="$MSG [yes|n]"

	while true; do
		errecho $MSG
		read yn
		case $yn in
			[Yy]es ) 
				break;;
			[Nn]* ) 
				if "$EXITONNO";
				then 
					exiterr;
				else 
					RETURN_VAL=1; break; 
				fi;;
			* ) errecho "Please answer yes or no (n).";;
		esac
	done
	return $RETURN_VAL;
}

#CONTENT ENDS
fi
