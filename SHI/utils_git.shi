#!/bin/bash

. utils_core.shi

if ! alreadyIncluded UTILS_GIT; then

. utils_vb.shi

### START CONTENT

gitCurrentBranch() 
{
	V=$(git branch 2>/dev/null | grep '*' | sed 's/*//')
	V=${V:="No-Git-Branch-Available"}
	echo $V
}

getGitRoot() # return the dir name of current git root dir (has .git file).
{
	checkIsGitDir;

	local isRoot=false;

	(
		while ! isGitRootDir; do
			cd ..
		done
		pwd
	)
}

isGitRootDir()
{
	if test -a ".git"; then return 0; else return 1; fi
}

isGitDir() # if $(isGitDir); then ... fi
{
	no ne git rev-parse --is-inside-work-tree
}

checkIsGitDir() # exit if not.
{
	if ! $(isGitDir); then
		errecho "$0: Error <$(pwd)> Not A Git Dir"
		exiterr -k;
	fi
}

xfindgitdirs()
{
	for i in $(xfinddirs); do
	(
		cd $i;
		if isGitRootDir; then 
			echo $i
		fi
	)
	done
}

gitNeedsCommit()
{
	checkIsGitDir;

	if ! test -z "$(git status -s)"; then
		return 0;
	else
		return 1;
	fi
}

gitStatus()
{
	checkIsGitDir;

	if gitNeedsCommit; then	
		echo "GIT COMMIT REQUIRED IN: $(pwd)"
	fi
}

gitAbandonChanges()
{
	Warning "Abandon uncommitted changes?"
	git reset --hard
}

gitDoPush()
{
	git push origin $(gitCurrentBranch);
}

gitDoCommit()
{
	local MSG=${1:-"function $(fnname) - no commit message given - branch is <$(gitCurrentBranch)>"};
	git add -A
	git commit -m "$MSG"
}

gitCommitAndPush()
{
	gitDoCommit	"$1"
	gitDoPush
}

gitcandpfn() { gitCommitAndPush "$@"; }

### END CONTENT
fi
