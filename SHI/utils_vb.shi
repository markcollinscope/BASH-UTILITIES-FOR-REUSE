#!/bin/bash

# utils to enable addtional (perhaps debug) information to be printed (to stderr) only when UTS_VERBOSE flag is set.

. utils_globals.shi

if ! alreadyIncluded UTILS_VB; then 

VBFLAG=${UTS_VBFLAG:-'--vb'}	# can override from environment.

. utils_core.shi

## START CONTENT
VB_SUMMARY=$(cat <<END_VB
Functions mainly used in debugging - that print values, etc. when a 'verbose' flag is set to on. Note that the functionality automatically parses (then removes) "$VBFLAG", if it is the *first* argument to a script, to set verbose on.
END_VB
);

setVerbose() 
# set the verbose flag to TRUE 
# nb: used by vbecho and similar functions
{ 
	export UTS_VERBOSE=true; 
	export UTS_VERBOSEFLAG="$VBFLAG"; 
}

getVerbose()	
# return true (0) if verbose flag set to on.
{ 
	if $UTS_VERBOSE; then return 0; else return 1; fi; 
}

verbose()		
# return true (0) if verbose flag set to on.
{ 
	getVerbose; 
}

resetVerbose() 	
# set verbose flag to false.
# nb: used by vbecho and similar functions
{ 
	export UTS_VERBOSE=false; export UTS_VERBOSEFLAG=""; 
}

resetVerbose;

vbvar() # <bash-var> - nb: no '$' needed or permitted.
# e.g. vbvar MY_VAR
# for debug -  print name and value of bash variable - <bash-var>
{
	local BASHVAR=$1; chkarg BASHVAR;
	vbecho "$(basename $0) [${FUNCNAME[1]}()]: $BASHVAR: <${!BASHVAR}>";
}

vbecho() # <string>
# print <string> if $(verbose) - verbose output flag - is true.
{ 
	if $UTS_VERBOSE; then setcol $YELLOW; (>&2 echo $*); setcolnorm; fi 
}

vbfnecho() # <string>
# print <echo style string> if $(verbose) - verbose output flag - is true.
# precede <echo style string> with function name of calling function.
{ 
	vbecho "$(basename $0) [${FUNCNAME[1]}()]: $*"; 
}

vbsleep() # <seconds>
# sleep for <seconds> if $(verbose) (verbose output flag) is true.
{ 
	if $UTS_VERBOSE; then sleep $*; fi 
}

checkIfVerbose() # <arg> - deprecated 
# now autoparses - for backwards compatibility and internal utils use only.
# quick parse to set if <arg> is $VBFLAG flag (by default '--vb', but can be reset).
{
	if test "$1" = "$VBFLAG"; then
		setVerbose;
		return 0;
	fi
	return 1;
}

# do autoparsing of verbose flag.
if ! $UTS_NOAUTOARGS; then
	if checkIfVerbose $1; then shift; fi
fi

# nb - re above: parses $1 (only) and if same value as $VBFLAG, sets verbose,
# also removes VBFLAG from the including script's command line args - so is 
# transparent to that script.

# overall effect: scripts will *automatically* set UTS_VERBOSE if $VBFLAG is first argument
# to the bash script that includes this file.

### END CONTENT
fi
