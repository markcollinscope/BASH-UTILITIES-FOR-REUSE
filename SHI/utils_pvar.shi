#!/bin/bash

. utils_globals.shi

if ! alreadyIncluded UTILS_PVAR; then
. utils_core.shi
. utils_vb.shi
. utils_msc.shi
. utils_fd.shi

# START CONTENT

export __PVARSUFFIX=$(randomString 3)
export __PVARNOTINITIALISED="UNINITIALISED PVAR ERROR"

_pvarfile()
{
	RES=$(concat "/tmp/" "$1" "." $__PVARSUFFIX)
	vbfnecho "$RES"
	echo $RES
}

_checkpvarisinit()
{
	setvar __PVARNAME $1
	local FILE=$(_pvarfile $__PVARNAME);
	local __PVARVALUE=$(cat $FILE);

	if  test "$__PVARVALUE" = "$__PVARNOTINITIALISED"; then
		errecho "$0: attempted use of pvar <$__PVARNAME> when not initialised"
		exiterr -k
	fi
}

_checkpvarisdeclared()
{
	setvar __PVARNAME $1
	local FILE=$(_pvarfile $__PVARNAME);

	if ! test -f $FILE; then
		errecho "$0: attempted use of pvar <$__PVARNAME> when not declared";
		exiterr -k;
	fi
}

declarepvar()
{
	setvar __PVAR_NAME $1
	shift;

	local FILE=$(_pvarfile $__PVAR_NAME);
	echo "$__PVARNOTINITIALISED" > $FILE
}

pvarcontext()
{
	setvar __PVARSUFFIX "$1"
}

setpvar()
{
	setvar PVAR_NAME "$1"
	_checkpvarisdeclared $PVAR_NAME;
	shift;

	setvar PVAR_VALUE "$@"

	local FILE=$(_pvarfile $PVAR_NAME);
	echo "$PVAR_VALUE" > $FILE
}

getpvar()
{
	setvar __PVAR_NAME $1;
	_checkpvarisdeclared $__PVAR_NAME;
	_checkpvarisinit $__PVARNAME;

	local FILE=$(_pvarfile $__PVAR_NAME);

	vbfnecho "$__PVAR_NAME,$FILE"
	local PVAR_VALUE=$(cat $FILE)
	vbfnecho "VALUE: $PVAR_VALUE"
	
	echo $PVAR_VALUE
}

if test "$1" = "--test"; then
	declarepvar _HELLO	
	setpvar _HELLO "this is a pvar value";
	VAL=$(getpvar _HELLO)
	echo RESULT1: $VAL

	setpvar _HELLO "this is a second value";
	VAL=$(getpvar _HELLO)
	echo RESULT12 $VAL

	declarepvar _GOODBYE
	VAL=$(getpvar _GOODBYE)
	# that's an error.
fi

# END CONTENT
fi
