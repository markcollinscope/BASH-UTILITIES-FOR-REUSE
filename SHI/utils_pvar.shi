#!/bin/bash

. utils_globals.shi

if ! alreadyIncluded UTILS_PVAR; then
. utils_core.shi
. utils_vb.shi
. utils_msc.shi
. utils_fd.shi

# START CONTENT

__PVARSUFFIX=".pvar"
__PVARDIR=${UTS_PVARDIR:-"/tmp/"}
ensuredirexists $__PVARDIR

_pvardir()
{
	echo "$__PVARDIR"
}

_pvarsuffix()
{
	echo $__PVARSUFFIX
}

_setpvarsuffix()
{
	setvar _SUFFIX "$1"
	__PVARSUFFIX=$_SUFFIX;
}

_pvarfilename()
{
	setvar _PVARF "$1";

	RES=$(concat "$(_pvardir)" "$_PVARF" "." "$(_pvarsuffix)")
	vbfnecho "PVARFILE: $RES"
	echo $RES
}

_checkpvarisdeclared()
{
	setvar __PVARNAME $1
	local FILE=$(_pvarfilename $__PVARNAME);

	if ! test -f $FILE; then
		errecho -s "attempted use of pvar <$__PVARNAME> when not declared";
		exiterr -k;
	fi
}

pvarcontext()
{
	if null "$1"; then errfnecho -s "no context supplied"; exirerr -k; fi
	_setpvarsuffix ".$1"
}

declarepvar()
{
	setvar __PVAR_NAME "$1"
	setvar __PVAR_VALUE "$2"

	local FILE=$(_pvarfilename $__PVAR_NAME);
	if ! test -f $FILE; then
		echo "$__PVAR_VALUE" > $FILE
	fi
}

setpvar()
{
	setvar __PVAR_NAME "$1"; shift;
	setvar PVAR_VALUE "$@"

	_checkpvarisdeclared $__PVAR_NAME;

	local FILE=$(_pvarfilename $__PVAR_NAME);
	echo "$PVAR_VALUE" > $FILE
}

getpvar()
{
	setvar __PVAR_NAME $1;
	_checkpvarisdeclared $__PVAR_NAME;

	local FILE=$(_pvarfilename $__PVAR_NAME);

	vbfnecho "PVAR-NAME,FILE: $__PVAR_NAME, $FILE"
	local PVAR_VALUE=$(cat $FILE)
	vbfnecho "PVAR-VALUE: $PVAR_VALUE"
	
	echo $PVAR_VALUE
}

clearpvar()
# not a pvar delcaration check. used to 'make sure' pvar doesn't already have a value.
{
	setvar __PVAR_NAME $1;

	local FILE=$(_pvarfilename $__PVAR_NAME);
	rm -f $FILE;
}

# TBD: see try.shi -- this needs to be merged with pvardefault ...
pvarasdefault()
{
	setvar _PVARTOUSE "$1"
	local VALUETOUSE="$2";

	if null "$VALUETOUSE"; then
		VALUETOUSE=$(getpvar $_PVARTOUSE);
	fi
	echo $VALUETOUSE
}

rmpvarcontext()
{
	TMP=$(tmpFile)
	ensuredirexists $TMP

	(
	cd $(_pvardir);
	CONTEXT=$(_pvarsuffix)
	Warning "About to destroy context: <$CONTEXT> (all pvars moved to <$TMP>)"
	mv *.$(pvarsuffix) $TMP
	)
}

rmpvardir()
{
	TMP=$(tmpFile)
	ensuredirexists $TMP
	Warning "About to move PVAR dir: <$(_pvardir)> to: <$TMP> (i.e. all existing PVARs will be lost)"
	mv $(_pvardir) $TMP
}

if test "$1" = "--testpvar"; then
	declarepvar _HELLO	"WORLD"
	setpvar _HELLO "this is a pvar value";
	VAL=$(getpvar _HELLO)
	echo RESULT1: $VAL

	setpvar _HELLO "this is a second value";
	VAL=$(getpvar _HELLO)
	echo RESULT2 $VAL

	declarepvar _GOODBYE 'pvar'
	VAL=$(getpvar _GOODBYE)

	clearpvar HELLO
	declarepvar HELLO "THIS IS THIRD VALUE>"
	VAL=$(getpvar _HELLO)
	echo RESULT3: $VAL
fi

# END CONTENT
fi
