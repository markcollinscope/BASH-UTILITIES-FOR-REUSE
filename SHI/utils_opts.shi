#!/bin/bash

. utils_globals.shi
if ! alreadyIncluded UTILS_OPTS; then

. utils_core.shi
. utils_msc.shi

__OPTION_DOC=false;
__USAGE_FILE=$(tmpFile);
rm -f $__USAGE_FILE;
echo "Options:" > $__USAGE_FILE;

_DOCFLAG="-d"

addOptionsUsage()
{
	vbfnecho "$@"

	setvar FLG "$1";

	if ! null "$2"; then
		# Option format here.
		echo "$FLG: $2" >> $__USAGE_FILE;
	fi
}

getOptUsage()
{
	vbfnecho "$@" ": $__OPTION_DOC"

	if $__OPTION_DOC; then
		cat $__USAGE_FILE;
	fi
}

processDoc() # exec'd as new process.
{
	vbfnecho "$@"
	setvar FLAG "$1";
	shift;

	local ARGS=
	while ! null "$1"; do
		if test "$1" = "$_DOCFLAG"; then
			DOC="$2";
			addOptionsUsage "$FLAG" "$DOC"
			shift 2;
		else
			ARGS="$ARGS $1";
			shift;
		fi
	done
	echo "set -- $ARGS; __OPTION_DOC=$__OPTION_DOC"
}

binopt() # exec'd as new process.
{
	vbfnecho After processDoc: "$@"

	setvar FLAG $1
	setvar VAR $2
	setvar DEFAULT_VALUE $3
	setvar OTHER_VALUE $4
	shift 4;

	eval $(processDoc $FLAG "$@")

	EVAL="$VAR=$DEFAULT_VALUE"
	while ! null "$1"; do
		if test "$1" = "$FLAG"; then
			EVAL="$VAR=$OTHER_VALUE"
		else
			ARGS="$ARGS $1";
		fi
		shift;
	done

	echo "set -- $ARGS; $EVAL; __OPTION_DOC=$__OPTION_DOC"
	return 0;
}

boolopt() # FLAG [e.g -x]  VAR [e.g. X_A_BASHVAR]
# exec'd as new process.
{
	eval $(processDoc "$@");

	setvar FLAG $1
	setvar VAR $2
	shift 2;

	binopt $FLAG $VAR false true "$@"
}

valopt() 	# e.g. script -f afile ; use 'afile' if given with -f option.
{
	eval $(processDoc "$@");

	setvar FLAG $1
	setvar VAR $2
	shift 2;

	while ! test -z "$1"; do
		if test "$1" = "$FLAG"; then
			EVAL="$VAR=$2"
			shift 2;
		else
			ARGS="$ARGS $1";
			shift
		fi
	done

	echo "set -- $ARGS; $EVAL; __OPTION_DOC=$__OPTION_DOC"
	return 0;
}

fnopt() # exec'd as new process.
{
	eval $(processDoc "$@");

	setvar FLAG $1
	setvar FN $2
	shift 2;

	while ! test -z "$1"; do
		if test "$1" = "$FLAG"; then
			EVAL="callFnIfExists $FN"
		else
			ARGS="$ARGS $1";
		fi
		shift;
	done

	echo "set -- $ARGS; $EVAL; __OPTION_DOC=$__OPTION_DOC" 
	return 0;
}

argRange()
{
	setvar LOWER "$1";
	setvar UPPER "$2";
	setvarif MSG "$3";

	shift 2;
	local CNT=$(count "$@");
	if test "$CNT" -lt "$LOWER" || test "$CNT" -gt "$UPPER"; then
		MSG=${MSG:-"argument count error: upplied $CNT args. Expected between $LOWER and $UPPER inclusive"}
		errecho $MSG
		callFnIfExists Usage;
	fi
}

argExact()
{
	setvar EXACTVALUE $1
	argRange $EXACTVALUE $EXACTVALUE "argument count error. $CNT args given. Expected $EXACTVALUE".
}

# END CONTENT
fi

