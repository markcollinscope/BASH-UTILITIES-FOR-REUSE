Substring Extraction:
${string:position:length}: Extracts substring starting at position with a length of length.
${string:position}: Extracts substring starting at position to the end of the string.
${string:offset}: Extracts substring starting from offset. # as last one.

Length of String:
${#string}: Returns the length of the string.

Substring Removal:
${string#substring}: Removes the shortest match of substring from the beginning of string.
${string##substring}: Removes the longest match of substring from the beginning of string.
${string%substring}: Removes the shortest match of substring from the end of string.
${string%%substring}: Removes the longest match of substring from the end of string.

Substring Replacement:
${string/pattern/replacement}: Replace the first occurrence of pattern with replacement.
${string//pattern/replacement}: Replace all occurrences of pattern with replacement.

Substring Testing:
${string/pattern}: Tests if pattern exists in string.

Upper and Lower Case Conversion:
${string^}: Converts the first character of string to uppercase.
${string^^}: Converts all characters of string to uppercase.
${string,}: Converts the first character of string to lowercase.
${string,,}: Converts all characters of string to lowercase.


string --split|-s <seq> <value> => return multiple strings....

--lower
--upper
--first-lower
--first-upper

string -L -U -l -u (upper, lower case...)
string --len
string -d -D sub - substring removal.
string -D sub

string -f 
-f from
-t to

-F <c> -T <c> - from / to.

################# VB EXTENDED #################
--vb ... 
--vbt <tag> - vb with tag.
--vbf <fn> - vb for <fn> only. 
--vba - show all. --vbt and vbfn-- not shown without flag.

vbecho -t <tag> ...
vbecho <check in function by default>

all passthru in vbfnecho vbvar vb... 
#####################################

### opts passthru - stage 1 ###
boolopt --pass <flag> <flag> ... --all - all left.
valopt  --pass <flag> <flag> ... --all - all left.
opt --all <pa

boolopt=> opt bool -p|--pass
valopt =>  opt val -

$(opt flag <NAME>) => -x (if that is the option name).
#
fn()
{
	eval $(boolopt -x XXX "$@");
	eval $(valopt -y YYY "$@");

	local f1=$(opt --flag XXX);
	local f2=$(opt --flag YYY);	
}
###

# REMINDER myvar as fn?


########## SAFE-EVAL - USES RANDOM CHECK VALUE EVERY CALL #########?
evalsafe <coded-eval-string> # checks if eval string has <magic number> in it.
eval.echo <ordinary string> # return coded echo string...

########### METAFN #################
fn body <fnname> - return body only.
fn clone <newfn> <oldfn> --vb - note it is cloned.
fn calls <newfn> <oldfn> --vb - note callthru.

fn name -l <n>
Assign to a fn var?

fn intercept <fnname> <prefn> <postfn> - must be able to store <fn-local> vars in prefn & postfn to be useful. => push... pop...


idea:
fn module <module-name> - set the fn context for all following fns 'declared'
fn opts <myfn> - prints the opts 'usage' for myfn. does not exit - (exitok, exiterr... ignored).
fn args <myfn> - look for 'argument processing' - use docco if provided.


fn()
{
	eval $(opt.type --rem 'vaslkjdjfd' --flag <name> "$@");
	local var=$(arg $1 --rem 'filename');
	local car=$(arg $2 --rem 'carname');
	local tar-$(arg $3 --opt -d <default>);
	
}

fn doc <myfn> "
description of <myfn>
"
fn export <myfn> - registered and saved... <myfn> - also export -f ...
fn export <myfn> --doc " docco ";
fn export <myfn> --module <module> --doc "<docco> ... \n"
fn export <myfn> --module <module> --doc "<docco> ... \n" --as <newfnname>

METAFN:2
fn push <oldfn> - save <oldfn> to get later.
fn pop <oldfn> - retrieve and redefine oldfn as was before.

So: maintains a stack...

myfn() { ... }
fn push myfn;
myfn() { redefinition ...; }
fn pop myfn; # restore.



----
Basic String:
The simplest form of pattern is just a plain string. In this case, Bash performs a literal string replacement.
Example: ${string//old/new} replaces all occurrences of the string "old" with the string "new".
Wildcard Characters:
Bash supports basic pattern matching with the following wildcard characters:
*: Matches any number of characters (including zero).
?: Matches any single character.
Example: ${string//a*b/c} replaces all substrings starting with "a", followed by any characters, and ending with "b" with the string "c".
Character Classes:
You can use character classes like [...] to match any character within the brackets.
Example: ${string//[aeiou]/X} replaces all vowels with the character "X".
Character Ranges:
You can specify ranges of characters within character classes using a hyphen -.
Example: ${string//[a-z]/X} replaces all lowercase letters with the character "X".
Negation:
You can negate character classes by placing ! or ^ at the beginning of the class.
Example: ${string//[^0-9]/X} replaces all non-digit characters with the character "X".
Escape Sequences:
You can use escape sequences like \t for tab, \n for newline, etc.
Example: ${string//\\n/\n} replaces all occurrences of "\n" with a newline character.
