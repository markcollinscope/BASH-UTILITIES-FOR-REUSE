. utils.shi

JQ=jq;
softwareRequired $JQ

sq() { echo \'"$@"\'; }
dq() { echo \""$@"\"; }

# readonly SBRA=[]

# readonly TYPE_SUBST='s/type/'"type"/g'
# readonly VAL_SUBST='s/val/'""val""/g'

readonly TYPE="type"
readonly TYPEQ=\"$TYPE\";

readonly VAL=value
readonly VALQ=$(dq $VAL);
readonly VALD=$(concat '.' $VAL);
readonly VALA=$(concat $VAL '[]');

readonly SET=SET
readonly SETQ=$(dq $SET);
readonly NULL_ARR=[];

readonly SET_EMPTY=$( concat '{' $TYPEQ:$SETQ , $VALQ:$NULL_ARR '}' );
echo $SET_EMPTY

# eval $(valopt  --rem "<filename> - use the filename given instead of the default value" --file FILE_NAME_OPT "$@");
# errifopt "$@"; 

ds_set()
{
    local IN="$@"
    local OUT_AS_JQ=$SET_EMPTY

    if ! null $IN; then OUT_AS_JQ=$IN; fi

    vbvar OUT_AS_JQ

    # default option - return in iterable format (for i in ...)
    local JQ_OP=$( concat "-r " \' $VALD '[]' \' )


    local EGVAL=\{\"value\":\[\"hello\",\"world\"\]\} 
    vbvar EGVAL

    vbvar JQ_OP

cat<<EOF
    CAT:
    $(echo $EGVAL | jq $JQ_OP)
    ENDCAT:
EOF
    echo "EGVAL: " $EGVAL | jq \'$JS_OP\'
    echo "EGVAL: " $EGVAL | jq -r '.value[]'
    echo "OUT: " $OUT_AS_JQ | jq $JQ_OP

    # | jq $JQ_OP
}

ds_set;

