ideas:

fn.call() { eval "$@"; }

arg.check() { echo value; }
arg.chk() { echo value; }

alias ALL="$@"

arg()
{
	local err=true;
	local default=helloworld!

	if null "$@" ; then
	
		if $err ; then echo error $(fnname); exit 1; fi
	fi
	echo "$@";
}

alias fn=function

function str.rm()
{
	todo rm nout default ' '
	local rm=' ';
	echo "$@" | sed "s/$rm//g" 
}

echo hello
str.rm $(arg 1 2 3	    4	5);
arg

exit;

str.encode
{
}

str.cat()
{
	$(fn.call concat "$@");
}


opt.value()
{
	tbd --rem;

	local flag=$1

	if test $1 = '--name'; then
		name=$2;
		shift 2;
	fi
	$(concat $(fnname) flag=$3
}

fn.define() # <name> 
{

}

fn.define clone 
{

}


. utils.shi
. sh-unit.shi

_utsfn()
{
	eval "$@";
	return 0;

	local oldfn="$1";
	shift;

	if null "$oldfn"; then errfnecho "(caller [$(_fnname -l 2)] n ull oldfn <$oldfn>" ; fi

	vbvar oldfn

	if _fnexists $oldfn; then
		vbfnecho "nb: calling to legacy fn <$oldfn>($@)";
		$($oldfn "$@");
		return 0;
	fi
}

_errecho()
{
	_utsfn errecho "$@"
}

_fninvalid() 
{
	local fnname=$1;
	_errexit "function <$fnname> - does not exist";
}

_fnname()
{
	fnname "$@";
}

fnname.shtest()
{
	local output=$(_fnname -l 2);
	local xoutput="fnname.shtest";
	vbecho $xoutput

	assertSame $output $xoutput;
}

_filetmp()
{
	_utsfn tmpFile;
}

_concat()
{
	_utsfn concat "$@":
}

_fntbd()
{
	local miscfile=$(_filetmp):
	echo "$@" > $miscfile;
	_vbecho "$(_fnname -l 2): tbd!!";
}

_errexit() 
{ 
	_errecho "$@"; 
	_utsfn exiterr -k;
}

_arg()
{
	local args="$@"
	if _null $args; then _errexit "null args to $(_fnname)"; fi
	_fnreturn $args
}

_ref()
{
	local args="$@"
	if _null $args; then _errexit "null args to $(_fnname)"; fi
	_fnreturn $args
}

_opt() 
{
	local val=$(_arg $1);
	local -n var=$(_ref $2);
	shift 2;
}

_match() 
{ 
	test "$1" = "$2"; 
}

_fnbody()
{
	local fnname=$(_arg $1);

	if _fnexists $fnname; then 
		declare -f $fnname | grep -v $fnname;
		return 0;
	fi

	_fninvalid $fnname;
	return 1;
}

_fnclone()
{
	local oldfn=$(_arg $1);
	local newfn=$(_arg $2);

	local fnbody=$(_fnbody $oldfn);
	local newfndefinition="
		$newfn() $fnbody;
	"
}


_fnimport()
{
	local fnname=$(_arg $1);

}

_randomString() 
{ 
	_utsfn randomString; 
}

_ref()
{
	local varsuffix="";

	if _match "$1" "anon"; then
		shift;
		varsuffix=$(_randomSring);
	fi

	local varname="$1";
	fn.return 
}

_anonref()
{
	_fntbd;
}

_len()
{
	local str=$(_arg $1);
	_fnreturn ${#str};
}

_charat()
{
	local pos=$(_arg $1);
	local str=$(_arg $2);

	_fnreturn ${str:pos:1}
}

_opt()
{
	local len=$(_len $1);
}

_fnexists()
{
	local exitonerr=false;
	if _match "$1" "--err"; then
		exitonerr=true;
		shift;
	fi
	if ! test "$(type -t $1)" = "function" ; then
		_errexit "function: $<$1> does not exist";
	fi
}

_fnreturn() 
{
	echo "$@";
}

_null()
{
	test -z "$@";
}

_errifnull() 
{ 
	if null "$@"; then
		_errexit "null argument to $(_fnname)"
	fi 
}

_fneval() 
{
	local vb=false;

	if _match "$1" "--vb"; then
		shift;
		vb=true;
	fi	
	local cmd="$@";
	if $vb; then _vbecho "$(fn.name) $cmd"; fi
	eval $cmd;
}

_vbecho() 
{
	_utsfn vbecho "$@";
}

_fneval()
{
	eval "$@";
}

_fnerror() 
{
	>&2 echo "$*";
	exiterr -k;
}

_fncallif()
{
	if _fnexists "$1"; then 
		_fneval "$@";
	fi
}

runTests;


	function test.privar.null()
	{
		private() { privar; }
		local -n testvar1=$(private);

